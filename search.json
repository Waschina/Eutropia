[{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://waschina.github.io/Eutropia/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://waschina.github.io/Eutropia/articles/Crossfeeding.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Cross-feeding between two gastrointestinal bacteria","text":"intestinal bacterium Eubacterium rectale known able use acetate energy source anaerobic conditions forms butyrate end product (Rivère et al. (2015) Appl Envrion Microbiol). Acetate common fermentation end product number different intestinal bacteria, including Bifidobacteria (e.g. Bifidobacterium longum). tutorial, co-culture experiment species simulated aerobic environment contains glucose sole source carbon energy. tested acetate cross-feeding occurs organisms affect others population growth.","code":""},{"path":"https://waschina.github.io/Eutropia/articles/Crossfeeding.html","id":"the-setup","dir":"Articles","previous_headings":"","what":"The setup","title":"Cross-feeding between two gastrointestinal bacteria","text":"growth environment, Petri dish-shaped growth area defined radius 80 micro meters. space metabolite concentrations rasterized rhombic dodecahedrons size 1 µm (distance adjacent field centers). chemical growth environment consists 6 field layers height (.e. z-dimension). Next, read models organisms place 15 cells growth environment. required, curiosity initial spatial distribution cells can plotted.  Now simulation object cells. Next add nutrients growth medium.","code":"# create simulation environment sim <- init_simulation(\"Petri_80\",                        gridFieldSize = 1,                        gridFieldLayers = 6) # add organisms (15 cells of each as 'starter culture') models <- list() models[['eure']] <- readRDS(system.file(\"extdata\", \"eure.RDS\",                                         package=\"Eutropia\")) models[['bilo']] <- readRDS(system.file(\"extdata\", \"bilo.RDS\",                                         package=\"Eutropia\"))  sim <- add_organism(sim, model = models[['eure']], name = \"E. rectale\",                     ncells = 15, distribution.radius = 25,                     open.bounds = 1) #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)' sim <- add_organism(sim, model = models[['bilo']], name = \"B. longum\",                     ncells = 15, distribution.radius = 25,                     open.bounds = 1) #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 15 > 1' in coercion #> to 'logical(1)' plot_cells(sim,            scalebar.color = \"black\") # Load a medium table dt_medium <- fread(system.file(\"extdata\", \"medium.csv\", package=\"Eutropia\"))  # adding compounds sim <- add_compounds(sim,                      compounds = dt_medium$cpd.id,                      concentrations = dt_medium$mM,                      compound.names = dt_medium$cpd.name,                      is.constant = dt_medium$is.constant)"},{"path":"https://waschina.github.io/Eutropia/articles/Crossfeeding.html","id":"the-simulation","dir":"Articles","previous_headings":"","what":"The simulation","title":"Cross-feeding between two gastrointestinal bacteria","text":"set run first simulation. run either maximum 50 iterations (= 500 minutes simulated time, option niter) maximum 4 minutes 30 seconds (option lim_time). latter case, last iteration allowed finish even time limit exceeded.","code":"sim <- run_simulation(sim, niter = 50, verbose = 1, lim_time = 4.5) #> Initalising simulation using 1 CPU cores. #> LP-solver: glpkAPI #> [00:00:00] Simulation round 1    (30 cells, 8.40 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(4.49) B. longum(4.44) #> [00:00:06] Simulation round 2    (30 cells, 8.93 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(4.81) B. longum(4.69) #> [00:00:11] Simulation round 3    (30 cells, 9.49 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(5.15) B. longum(4.95) #> [00:00:17] Simulation round 4    (30 cells, 10.10 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(5.52) B. longum(5.23) #> [00:00:22] Simulation round 5    (30 cells, 10.75 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(5.92) B. longum(5.52) #> [00:00:27] Simulation round 6    (30 cells, 11.44 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(6.34) B. longum(5.83) #> [00:00:32] Simulation round 7    (30 cells, 12.17 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(6.79) B. longum(6.16) #> [00:00:37] Simulation round 8    (30 cells, 12.94 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(7.23) B. longum(6.49) #> [00:00:42] Simulation round 9    (30 cells, 13.72 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 30 > 1' in coercion #> to 'logical(1)' #>            E. rectale(7.67) B. longum(6.8) #> [00:00:47] Simulation round 10   (30 cells, 14.47 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 31 > 1' in coercion #> to 'logical(1)' #>            E. rectale(8.08) B. longum(7.11) #> [00:00:52] Simulation round 11   (31 cells, 15.18 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 39 > 1' in coercion #> to 'logical(1)' #>            E. rectale(8.47) B. longum(7.41) #> [00:00:58] Simulation round 12   (39 cells, 15.88 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 41 > 1' in coercion #> to 'logical(1)' #>            E. rectale(8.94) B. longum(7.69) #> [00:01:03] Simulation round 13   (41 cells, 16.63 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 43 > 1' in coercion #> to 'logical(1)' #>            E. rectale(9.43) B. longum(7.94) #> [00:01:09] Simulation round 14   (43 cells, 17.37 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 49 > 1' in coercion #> to 'logical(1)' #>            E. rectale(9.91) B. longum(8.17) #> [00:01:14] Simulation round 15   (49 cells, 18.08 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 52 > 1' in coercion #> to 'logical(1)' #>            E. rectale(10.38) B. longum(8.42) #> [00:01:21] Simulation round 16   (52 cells, 18.80 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 53 > 1' in coercion #> to 'logical(1)' #>            E. rectale(10.87) B. longum(8.68) #> [00:01:27] Simulation round 17   (53 cells, 19.55 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 55 > 1' in coercion #> to 'logical(1)' #>            E. rectale(11.33) B. longum(8.94) #> [00:01:33] Simulation round 18   (55 cells, 20.26 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)' #>            E. rectale(11.78) B. longum(9.19) #> [00:01:40] Simulation round 19   (56 cells, 20.97 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 56 > 1' in coercion #> to 'logical(1)' #>            E. rectale(12.23) B. longum(9.45) #> [00:01:46] Simulation round 20   (56 cells, 21.68 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 57 > 1' in coercion #> to 'logical(1)' #>            E. rectale(12.65) B. longum(9.71) #> [00:01:53] Simulation round 21   (57 cells, 22.35 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 60 > 1' in coercion #> to 'logical(1)' #>            E. rectale(13.03) B. longum(9.95) #> [00:01:59] Simulation round 22   (60 cells, 22.98 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 63 > 1' in coercion #> to 'logical(1)' #>            E. rectale(13.43) B. longum(10.19) #> [00:02:06] Simulation round 23   (63 cells, 23.62 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 65 > 1' in coercion #> to 'logical(1)' #>            E. rectale(13.86) B. longum(10.4) #> [00:02:14] Simulation round 24   (65 cells, 24.26 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 66 > 1' in coercion #> to 'logical(1)' #>            E. rectale(14.29) B. longum(10.59) #> [00:02:21] Simulation round 25   (66 cells, 24.88 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)' #>            E. rectale(14.7) B. longum(10.77) #> [00:02:28] Simulation round 26   (68 cells, 25.47 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 68 > 1' in coercion #> to 'logical(1)' #>            E. rectale(15.11) B. longum(10.95) #> [00:02:36] Simulation round 27   (68 cells, 26.06 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 69 > 1' in coercion #> to 'logical(1)' #>            E. rectale(15.46) B. longum(11.12) #> [00:02:43] Simulation round 28   (69 cells, 26.58 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 70 > 1' in coercion #> to 'logical(1)' #>            E. rectale(15.81) B. longum(11.27) #> [00:02:51] Simulation round 29   (70 cells, 27.08 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)' #>            E. rectale(16.17) B. longum(11.41) #> [00:02:58] Simulation round 30   (73 cells, 27.58 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 73 > 1' in coercion #> to 'logical(1)' #>            E. rectale(16.5) B. longum(11.56) #> [00:03:06] Simulation round 31   (73 cells, 28.05 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)' #>            E. rectale(16.83) B. longum(11.71) #> [00:03:13] Simulation round 32   (75 cells, 28.54 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)' #>            E. rectale(17.18) B. longum(11.85) #> [00:03:21] Simulation round 33   (75 cells, 29.03 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 75 > 1' in coercion #> to 'logical(1)' #>            E. rectale(17.51) B. longum(12) #> [00:03:29] Simulation round 34   (75 cells, 29.52 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)' #>            E. rectale(17.86) B. longum(12.15) #> [00:03:37] Simulation round 35   (77 cells, 30.02 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 77 > 1' in coercion #> to 'logical(1)' #>            E. rectale(18.23) B. longum(12.29) #> [00:03:45] Simulation round 36   (77 cells, 30.51 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 78 > 1' in coercion #> to 'logical(1)' #>            E. rectale(18.58) B. longum(12.41) #> [00:03:53] Simulation round 37   (78 cells, 31.00 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)' #>            E. rectale(18.94) B. longum(12.56) #> [00:04:01] Simulation round 38   (80 cells, 31.50 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 80 > 1' in coercion #> to 'logical(1)' #>            E. rectale(19.33) B. longum(12.7) #> [00:04:09] Simulation round 39   (80 cells, 32.03 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 82 > 1' in coercion #> to 'logical(1)' #>            E. rectale(19.72) B. longum(12.84) #> [00:04:17] Simulation round 40   (82 cells, 32.57 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 84 > 1' in coercion #> to 'logical(1)' #>            E. rectale(20.15) B. longum(12.99) #> [00:04:26] Simulation round 41   (84 cells, 33.13 pg dBM) #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)' #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)'  #> Warning in min_constrained || max_constrained: 'length(x) = 86 > 1' in coercion #> to 'logical(1)' #>            E. rectale(20.58) B. longum(13.11)"},{"path":"https://waschina.github.io/Eutropia/articles/Crossfeeding.html","id":"analyse-the-environment-after-the-simulation","dir":"Articles","previous_headings":"","what":"Analyse the environment after the simulation","title":"Cross-feeding between two gastrointestinal bacteria","text":"package comes number functions plot simulation results.      consumed produced metabolites (.e. exchanges) can retrieved simulation. addition, information can retrieved earlier iterations simulation. results clearly show acetate produced B. longum consumed E. rectale.","code":"# Plot spatial distribution of cells plot_cells(sim, scalebar.color = \"black\") # Spatial distribution of glucose plot_environment(sim, compounds = c(\"cpd00027_e0\"),                  scalebar.color = \"black\") # Spatial distribution of acetate, lactate and butyrate plot_environment(sim,                  compounds = c(\"cpd00029_e0\",\"cpd00211_e0\",\"cpd00159_e0\"),                  scalebar.color = \"black\") # growth curves (total cell mass by species) plot_growth(sim) # dynamics in metabolite concentrations (calculated by total environment volume) plot_compounds(sim, compounds = c(\"cpd00029_e0\",\"cpd00211_e0\",\"cpd00159_e0\")) summary_exchanges(sim) #>           type    compound     compound.name          fmol #>  1: E. rectale cpd00001_e0             Water  1.894741e+01 #>  2: E. rectale cpd00009_e0         Phosphate -5.693582e-01 #>  3: E. rectale cpd00027_e0         D-Glucose -9.549735e+00 #>  4: E. rectale cpd00034_e0              Zn2+ -3.095561e-03 #>  5: E. rectale cpd00048_e0           Sulfate -3.095561e-03 #>  6: E. rectale cpd00149_e0              Co2+ -3.095561e-03 #>  7: E. rectale cpd10516_e0              Fe3+ -3.095561e-03 #>  8: E. rectale cpd00067_e0                H+  7.250417e+00 #>  9: E. rectale cpd00063_e0              Ca2+ -3.095561e-03 #> 10: E. rectale cpd00058_e0              Cu2+ -3.095561e-03 #> 11: E. rectale cpd10515_e0              Fe2+ -7.479820e-03 #> 12: E. rectale cpd00205_e0                K+ -3.095561e-03 #> 13: E. rectale cpd00099_e0               Cl- -3.095561e-03 #> 14: E. rectale cpd00013_e0          Ammonium -3.640682e+00 #> 15: E. rectale cpd00011_e0               CO2  1.131132e+01 #> 16: E. rectale cpd00029_e0           Acetate -3.986994e+00 #> 17: E. rectale cpd00363_e0           Ethanol  1.695526e+00 #> 18: E. rectale cpd00239_e0               H2S -9.490322e-02 #> 19: E. rectale cpd00211_e0          Butyrate  8.406676e+00 #> 20: E. rectale cpd00030_e0              Mn2+ -3.095561e-03 #> 21: E. rectale cpd00254_e0              Mg2+ -3.095561e-03 #> 22: E. rectale cpd00281_e0              GABA -3.986769e-16 #> 23: E. rectale cpd00971_e0            Sodium  2.784531e-13 #> 24:  B. longum cpd00001_e0             Water  3.615427e+00 #> 25:  B. longum cpd00009_e0         Phosphate -1.941970e-01 #> 26:  B. longum cpd00030_e0              Mn2+ -1.055836e-03 #> 27:  B. longum cpd00048_e0           Sulfate -1.055836e-03 #> 28:  B. longum cpd00149_e0              Co2+ -1.055836e-03 #> 29:  B. longum cpd00067_e0                H+  9.456537e+00 #> 30:  B. longum cpd00027_e0         D-Glucose -4.277686e+00 #> 31:  B. longum cpd00013_e0          Ammonium -1.252981e+00 #> 32:  B. longum cpd00063_e0              Ca2+ -1.055836e-03 #> 33:  B. longum cpd00058_e0              Cu2+ -1.055836e-03 #> 34:  B. longum cpd00281_e0              GABA -3.932915e-17 #> 35:  B. longum cpd00205_e0                K+ -1.055836e-03 #> 36:  B. longum cpd00159_e0         L-Lactate  2.492617e+00 #> 37:  B. longum cpd00254_e0              Mg2+ -1.055836e-03 #> 38:  B. longum cpd00011_e0               CO2  4.079215e-01 #> 39:  B. longum cpd00029_e0           Acetate  5.987196e+00 #> 40:  B. longum cpd00363_e0           Ethanol  2.877595e-14 #> 41:  B. longum cpd00239_e0               H2S -3.236965e-02 #> 42:  B. longum cpd00034_e0              Zn2+ -1.055836e-03 #> 43:  B. longum cpd00099_e0               Cl- -1.055836e-03 #> 44:  B. longum cpd10515_e0              Fe2+ -2.551222e-03 #> 45:  B. longum cpd10516_e0              Fe3+ -1.055836e-03 #> 46:  B. longum cpd00229_e0    Glycolaldehyde  2.243079e-03 #> 47:  B. longum cpd03091_e0 5'-Deoxyadenosine  2.243079e-03 #>           type    compound     compound.name          fmol summary_exchanges(sim, iter = 10) #>           type    compound     compound.name          fmol #>  1: E. rectale cpd00001_e0             Water  1.933984e+01 #>  2: E. rectale cpd00009_e0         Phosphate -5.845487e-01 #>  3: E. rectale cpd00027_e0         D-Glucose -9.819848e+00 #>  4: E. rectale cpd00034_e0              Zn2+ -3.178150e-03 #>  5: E. rectale cpd00048_e0           Sulfate -3.178150e-03 #>  6: E. rectale cpd00149_e0              Co2+ -3.178150e-03 #>  7: E. rectale cpd10516_e0              Fe3+ -3.178150e-03 #>  8: E. rectale cpd00067_e0                H+  7.587597e+00 #>  9: E. rectale cpd00971_e0            Sodium  2.847335e-13 #> 10: E. rectale cpd00063_e0              Ca2+ -3.178150e-03 #> 11: E. rectale cpd00058_e0              Cu2+ -3.178150e-03 #> 12: E. rectale cpd10515_e0              Fe2+ -7.679381e-03 #> 13: E. rectale cpd00205_e0                K+ -3.178150e-03 #> 14: E. rectale cpd00099_e0               Cl- -3.178150e-03 #> 15: E. rectale cpd00013_e0          Ammonium -3.737815e+00 #> 16: E. rectale cpd00011_e0               CO2  1.154793e+01 #> 17: E. rectale cpd00029_e0           Acetate -3.836540e+00 #> 18: E. rectale cpd00363_e0           Ethanol  1.788676e+00 #> 19: E. rectale cpd00239_e0               H2S -9.743523e-02 #> 20: E. rectale cpd00211_e0          Butyrate  8.517879e+00 #> 21: E. rectale cpd00030_e0              Mn2+ -3.178150e-03 #> 22: E. rectale cpd00254_e0              Mg2+ -3.178150e-03 #> 23:  B. longum cpd00001_e0             Water  7.895212e+00 #> 24:  B. longum cpd00009_e0         Phosphate -4.240790e-01 #> 25:  B. longum cpd00030_e0              Mn2+ -2.305688e-03 #> 26:  B. longum cpd00048_e0           Sulfate -2.305688e-03 #> 27:  B. longum cpd00149_e0              Co2+ -2.305688e-03 #> 28:  B. longum cpd00067_e0                H+  2.065077e+01 #> 29:  B. longum cpd00027_e0         D-Glucose -9.341425e+00 #> 30:  B. longum cpd00013_e0          Ammonium -2.736206e+00 #> 31:  B. longum cpd00063_e0              Ca2+ -2.305688e-03 #> 32:  B. longum cpd00058_e0              Cu2+ -2.305688e-03 #> 33:  B. longum cpd00205_e0                K+ -2.305688e-03 #> 34:  B. longum cpd00159_e0         L-Lactate  5.443267e+00 #> 35:  B. longum cpd00254_e0              Mg2+ -2.305688e-03 #> 36:  B. longum cpd00011_e0               CO2  8.908012e-01 #> 37:  B. longum cpd00029_e0           Acetate  1.307458e+01 #> 38:  B. longum cpd00363_e0           Ethanol  7.039190e-14 #> 39:  B. longum cpd00239_e0               H2S -7.068742e-02 #> 40:  B. longum cpd00034_e0              Zn2+ -2.305688e-03 #> 41:  B. longum cpd00099_e0               Cl- -2.305688e-03 #> 42:  B. longum cpd10515_e0              Fe2+ -5.571246e-03 #> 43:  B. longum cpd10516_e0              Fe3+ -2.305688e-03 #> 44:  B. longum cpd00229_e0    Glycolaldehyde  4.898337e-03 #> 45:  B. longum cpd03091_e0 5'-Deoxyadenosine  4.898337e-03 #> 46:  B. longum cpd00211_e0          Butyrate  8.334564e-16 #>           type    compound     compound.name          fmol"},{"path":"https://waschina.github.io/Eutropia/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Silvio Waschina. Author, maintainer. Sina Zimmermann. Author. Svenja Busche. Author.","code":""},{"path":"https://waschina.github.io/Eutropia/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Waschina S, Zimmermann S, Busche S (2022). Eutropia: Agent-based modelling microbial communities time continuous µ-meter-scale space. R package version 0.1.7, https://waschina.github.io/Eutropia.","code":"@Manual{,   title = {Eutropia: Agent-based modelling of microbial communities in time and continuous µ-meter-scale space},   author = {Silvio Waschina and Sina Zimmermann and Svenja Busche},   year = {2022},   note = {R package version 0.1.7},   url = {https://waschina.github.io/Eutropia}, }"},{"path":"https://waschina.github.io/Eutropia/index.html","id":"eutropia","dir":"","previous_headings":"","what":"Agent-based modelling of microbial communities in time and continuous µ-meter-scale space","title":"Agent-based modelling of microbial communities in time and continuous µ-meter-scale space","text":"Agent-based metabolic modelling microbial communities time continuous µ-meter-scale space","code":""},{"path":"https://waschina.github.io/Eutropia/index.html","id":"what-is-eutropia","dir":"","previous_headings":"","what":"What is Eutropia","title":"Agent-based modelling of microbial communities in time and continuous µ-meter-scale space","text":"Eutropia R-package cell agent-based metabolic modelling microbial communities. allows dynamic simulations two-dimensional surface-attached cell communities. features Eutropia, might find interesting: Complex polygons (also non-convex) growth environment Extracellular enzymes Nutrient regimes Chemotaxis (attracting repelling) Direct calculations community assortment segregation (see e.g. Yanni et al. (2015) Current Biology)","code":""},{"path":"https://waschina.github.io/Eutropia/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Agent-based modelling of microbial communities in time and continuous µ-meter-scale space","text":"Eutropia development phase. current development version can installed using: installed devtools yet, just uncomment first line. addition, recommend install also development version dependency particles, Eutropia uses physics engine (e.g. cell collision).","code":"# install.packages(\"devtools\") devtools::install_github(\"Waschina/Eutropia\") devtools::install_github(\"thomasp85/particles\")"},{"path":"https://waschina.github.io/Eutropia/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Agent-based modelling of microbial communities in time and continuous µ-meter-scale space","text":"example simulation, please look package’s vignette.","code":""},{"path":"https://waschina.github.io/Eutropia/index.html","id":"some-tricks-to-increase-performance","dir":"","previous_headings":"","what":"Some tricks to increase performance","title":"Agent-based modelling of microbial communities in time and continuous µ-meter-scale space","text":"individual Flux-Balance-Analysis steps, Eutropia requires LP-solver. Ideally, GLPK (GNU Linear Programming Kit) together R-interface-package glpkAPI work. like speed simulations, consider installing IBM’s ILOG CPLEX Optimization Studio along R-interface-package cplexAPI. academia, make sure check IBM’s academic initiative. Installing R-package cplexAPI can sometimes bit tricky, ’d suggest get latest version following install instructions.","code":""},{"path":"https://waschina.github.io/Eutropia/index.html","id":"a-big-thank-you-","dir":"","previous_headings":"","what":"A big Thank You 💐","title":"Agent-based modelling of microbial communities in time and continuous µ-meter-scale space","text":"developers maintainers sybil-universe (sybil, glpkAPI, cplexAPI, sybilSBML). R better place packages. use Eutropia, please make sure give credits sybil citing: Gelius-Dietrich, G., Desouki, .., Fritzemeier, C.J., Lercher, M.J. sybil – Efficient constraint-based modelling R. BMC Syst Biol 7, 125 (2013). https://doi.org/10.1186/1752-0509-7-125 everyone behind GLPK (GNU Linear Programming Kit)","code":""},{"path":"https://waschina.github.io/Eutropia/reference/Exoenzyme-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of the S4 class ","title":"Structure of the S4 class ","text":"Structure S4 class \"Exoenzyme\"","code":""},{"path":"https://waschina.github.io/Eutropia/reference/Exoenzyme-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of the S4 class ","text":"id Character exoenzyme ID name Characer exoenzyme name D Numeric enzymes' diffusion coefficients. Unit: \\(\\mu\\)m^2 per sec lambda Numeric enzyme's decay constants. Unit: per hr Kcat Numeric turnover rate (kcat) MM-kinetics. Unit: 1/s Km Numeric Km MM-kinetics. Unit: mM mets Character vector metabolite IDs compounds reaction. Main substrate first element. stoich Numeric vector stoichiometries `mets` exoenzyme's reaction.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/Organism-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of the S4 class ","title":"Structure of the S4 class ","text":"Structure S4 class \"Organism\"","code":""},{"path":"https://waschina.github.io/Eutropia/reference/Organism-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of the S4 class ","text":"cellDiameter Numeric initial Diameter cell spheres \\(\\mu\\)m cellMassInit Numeric initial cell mass pg cellMassAtDivision Limit cell's mass divided two daughter cells. Unit: pg cellShape Character cell shape type. Currently, coccus/sphere shapes supported. vmax Numeric maximum speed cell can move \\(\\mu\\)m/s scavengeDist Numeric indicating maximum distance (cell surface) cell can scavenge nutrients surrounding. Unit: \\(\\mu\\)m chemotaxisCompound Character vector compound IDs influence cells chemotaxis behavior. chemotaxisStrength Numeric vector indicates strength chemotaxis. Positive value attraction; Negative repelling effect. value 1 indicates case maximum gradient (concentration-weighted center cell's scavenge area edge area) cell moves maximum speed (vmax) direction gradient. chemotaxisHillKA Numeric vector K_A value Hill equation chemotactic metabolite sensing. Unit: mM chemotaxisHillCoef Numeric vector Hill coefficient. Unitless mod Object S4-class modelorg organisms metabolic network model. exoenzymes Character vector IDs organism's exoenzymes exoenzymes.prod Numeric vector production rates exoenzymes. Unit: nmol / gDW / hr (nmol Enzyme per gDW cells per hr) color Color organism visualizations.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_compounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Add compounds to the growth environment — add_compounds","title":"Add compounds to the growth environment — add_compounds","text":"function can used add substances growth environment providing concentrations mM.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_compounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add compounds to the growth environment — add_compounds","text":"","code":"add_compounds(   object,   compounds,   concentrations,   compound.names = NULL,   is.constant = NULL,   compound.D = NULL )"},{"path":"https://waschina.github.io/Eutropia/reference/add_compounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add compounds to the growth environment — add_compounds","text":"object S4-object type growthSimulation. compounds Character vector compound IDs substances add environment. Compound IDs correspond models' exchange reactions IDs (\"EX_[cpdid]\"), without \"EX_\" prefix. concentrations Numeric vector concentrations compounds `compounds` order. Values mM. compound.names Character vector compound names. .constant Logical vector indicates compound remain constant time despite potential uptake production cells. compound.D Numeric vector compounds' diffusion coefficients \\(\\mu\\)m^2/s. Default: 75","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_compounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add compounds to the growth environment — add_compounds","text":"Return S4-object type growthSimulation.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_compounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add compounds to the growth environment — add_compounds","text":"Compound concentration equally distributed across whole growth environment. compound already present, old new concentrations added. options planned. compound names provided, current names kept (compound already present) compound ID also used name (case compound new).","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_compounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add compounds to the growth environment — add_compounds","text":"","code":"sim <- init_simulation(cbind(c(-100, -100, 100, 100), c(-100, 100, 100, -100)),                        gridFieldSize = 2, gridFieldLayers = 3)  sim <- add_compounds(sim,                      compounds = c(\"cpd00027_e0\",\"cpd00029_e0\",\"cpd00047_e0\",                                    \"cpd00159_e0\",\"cpd00211_e0\"),                      concentrations = c(50,0,0,0,0),                      compound.names = c(\"D-Glucose\",\"Acetate\",\"Formate\",                                         \"L-Lactate\",\"Butyrate\"),                      is.constant = rep(FALSE, 5))"},{"path":"https://waschina.github.io/Eutropia/reference/add_exoenzyme.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an exoenzyme to organism and simulation — add_exoenzyme","title":"Add an exoenzyme to organism and simulation — add_exoenzyme","text":"Adds new exoenzyme simulation links specific organism.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_exoenzyme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an exoenzyme to organism and simulation — add_exoenzyme","text":"","code":"add_exoenzyme(   object,   organism,   id,   mets,   stoich,   production.rate = 0.01,   name = NULL,   D = 10,   lambda = 0.4,   Kcat = 10000,   Km = 100,   init.conc = 0 )"},{"path":"https://waschina.github.io/Eutropia/reference/add_exoenzyme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an exoenzyme to organism and simulation — add_exoenzyme","text":"object S4-object type growthSimulation organism Character indicating name organism, exoenzyme production linked id Character defining ID used specific exoenzyme mets Character vector compound IDs participate reaction catalyzed exoenzyme. stoich Numeric vector length order `mets` specifying stoichiometries compounds. First entry (substrate's coefficient) -1. production.rate Numeric indicating production rate enzyme organism. Unit: nmol enzyme catalytic centers per gDW cells per hr. Default: 0.01 name Character optional name enzyme. D Diffusion coefficient enzyme. Unit \\(\\mu\\)m^2/s. Default: 10 lambda Numeric indicating decay rate enzyme. Unit: per hour. Default: 0.4 . enzyme's half life can calculated ln(2)/lambda Kcat Numeric enzyme's turnover rate. Unit: 1/s . Default: 10000 Km Numeric Menten-Michaelis Km value. Unit: mM . Default: 100 init.conc Numeric indicating initial concentration enzyme growth environment. Unit: nM . Default: 0","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_exoenzyme.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an exoenzyme to organism and simulation — add_exoenzyme","text":"Exoenzymes can differ markedly kinetic parameters. defaults provided represent typical enzymes, chosen based data inveratases (EC 3.2.1.26) Zymomonas mobilis. Kcat (~10000 s^-1) Km (100 mM) obtained https://www.brenda-enzymes.org/enzyme.php?ecno=3.2.1.26&Suchword=&reference=&UniProtAcc=&organism","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_organism.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a model/organism to simulation — add_organism","title":"Add a model/organism to simulation — add_organism","text":"Adds organism genome-scale metabolic network model growth simulation object.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_organism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a model/organism to simulation — add_organism","text":"","code":"add_organism(   object,   model,   name,   ncells,   coords = NULL,   distribution.method = \"random_centroid\",   distribution.center = NULL,   distribution.radius = NULL,   cellDiameter = (3 * 1/(4 * pi))^(1/3) * 2,   cellMassInit = 0.28,   cellMassAtDivision = 0.56,   cellShape = \"coccus\",   vmax = 11,   scavengeDist = cellDiameter * 2.5,   rm.deadends = T,   chemotaxisCompound = NULL,   chemotaxisStrength = 0.01,   chemotaxisHillKA = 0.1,   chemotaxisHillCoef = 1.2,   open.bounds = NULL,   color = NULL )"},{"path":"https://waschina.github.io/Eutropia/reference/add_organism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a model/organism to simulation — add_organism","text":"object S4-object type growthSimulation. model organisms metabolic model S4-type modelorg name Character name model, also used plotting. ncells integer. Number initial cells added growth simulation. coords (optional) two column numerical matrix specifying coordinates (1st column x, 2nd column y) initial cells. provided, number rows equal ncells. Default: NULL distribution.method `coords` `NULL`, parameter specifies distribution method initial cells. Default: \"random_centroid\" distribution.center Numeric vector length 2, specifies coordinates centre `distribution.method`. distribution.radius double. Spcifies radius (\\(\\mu\\)m) initial cells distributed. cellDiameter double. Diameter \\(\\mu\\)m initial cells. cellMassInit double. Mass pg initial cells. Default 0.28 pg cellMassAtDivision double. Cell mass cell divides two daughter cells. Default: 0.56 pg cellShape character. Shape cells. Currently \"coccus\" supported. vmax double. Maximum velocity cell \\(\\mu\\)m per second. scavengeDist double. Distance \\(\\mu\\)m cell can scavenge nutrients surrounding/microoenvironment. rm.deadends TRUE, dead-end metabolites reactions removed `model`, reduces computation time FBA, otherwise effect flux distribution solutions. chemotaxisCompound Character vector compound IDs, signals directed movement organism. chemotaxisStrength Numeric vector indicates strength chemotaxis. Positive value attraction; Negative repelling effect. value 1 indicates case maximum gradient (concentration-weighted center cell's scavenge area edge area) cell moves maximum speed (vmax) direction gradient. Default: 0.01 chemotaxisHillKA Numeric vector K_A value (unit: mM) Hill equation chemotactic metabolite sensing. Default: 0.1 mM chemotaxisHillCoef Numeric vector Hill coefficient (unitless) metabolite sensing. Default: 1.2 open.bounds Numeric value used reset lower bounds exchange reactions, current lower bound 0. See Details. color Color organism visualizations.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_organism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a model/organism to simulation — add_organism","text":"Object class growthSimulation.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_organism.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a model/organism to simulation — add_organism","text":"Genome-scale metabolic models usually come pre-constraint, means lower bounds exchange reactions (= max. uptake rates) set represent, , () specific growth environment (b) physiological limit nutrient uptake. Yet, lower bounds value 0 might also utilizable organism compound present environment. option `open.bounds` used, 0-lower bounds replaced new lower bound enable potential uptake agent-based simulation. Please note value convention negative; however package changes value negative counterpart positive value provided. default cell diameter (\\((3 * 1 / (4 * pi))^(1/3) * 2\\)) sphere 1 \\(\\mu\\)m^3 volume. 'chemotaxisHillKA' 'chemotaxisHillCoef' metabolite sensing sensitivity parameters, modeled Hill equation. Default values correspond numbers estimated Sourjik Berg (2001, PNAS) Escherichia coli.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_organism.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add a model/organism to simulation — add_organism","text":"https://bionumbers.hms.harvard.edu/bionumber.aspx?id=100008 http://book.bionumbers.org/-big---e-coli-cell-----mass/ https://bionumbers.hms.harvard.edu/bionumber.aspx?id=115616&ver=0&trm=speed+e.+coli&org=   Victor Sourjik Howard C. Berg. (2001). Receptor sensitivity bacterial  chemotaxis. PNAS 99, 123-127.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/add_organism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a model/organism to simulation — add_organism","text":"","code":"# add two bacterial models (Eubacterium rectale, Bifidobacterium longum) # to the environment; each with 15 initial cells models <- list() models[['eure']] <- readRDS(system.file(\"extdata\", \"eure.RDS\",                             package=\"Eutropia\")) models[['bilo']] <- readRDS(system.file(\"extdata\", \"bilo.RDS\",                             package=\"Eutropia\"))  sim <- init_simulation(cbind(c(-100, -100, 100, 100),                              c(-100, 100, 100, -100)),                        gridFieldSize = 1.75, gridFieldLayers = 3)  sim <- add_organism(sim, model = models[[\"eure\"]], name = \"E. rectale\",                     ncells = 15, distribution.radius = 30) #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' sim <- add_organism(sim, model = models[[\"bilo\"]], name = \"B. longum\",                     ncells = 15, distribution.radius = 30) #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)' #> Warning: 'length(x) = 15 > 1' in coercion to 'logical(1)'  plot_cells(sim, xlim = c(-50,50), ylim= c(-50,50))"},{"path":"https://waschina.github.io/Eutropia/reference/calc_assortment.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial segregation and assortment — calc_assortment","title":"Calculate spatial segregation and assortment — calc_assortment","text":"functions calculates cell-wise mean cell type segregation assortment values suggested Yanni et al. (2019) Current Biology.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/calc_assortment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial segregation and assortment — calc_assortment","text":"","code":"calc_assortment(object, r = 5, iter = NULL, n_simulations = 10)"},{"path":"https://waschina.github.io/Eutropia/reference/calc_assortment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial segregation and assortment — calc_assortment","text":"object S4-object type growthSimulation. r Numeric. Maximum distance cells considered neighbour. Refers surface--surface distance cells. Unit: \\(\\mu\\)m. iter Positive integer number simulation step/iteration cell assortment calculated. NULL, current distribution displayed. n_simulations positive integer, specifying number permutations used estimate expected assortment cell types distributed randomly.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/calc_assortment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate spatial segregation and assortment — calc_assortment","text":"list three elements: 'cells' data table cell-wise calculated segregation assortment values. 'summary_observed' summary (mean sd) observed segregation assortment cell types. 'summary_expected' summary expected segregation assortment cell types reassigned randomly cells environment maintaining cell positions community-wide cell type counts.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/calc_assortment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate spatial segregation and assortment — calc_assortment","text":"Cell segregation assortment calculated suggested Yanni et al. (2019) Current Biology.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/dilute_compounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Dilute compounds — dilute_compounds","title":"Dilute compounds — dilute_compounds","text":"Dilutes selected compounds given dilution factor.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/dilute_compounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dilute compounds — dilute_compounds","text":"","code":"dilute_compounds(   object,   dilution.factor,   compounds = NULL,   incl.constant = FALSE )"},{"path":"https://waschina.github.io/Eutropia/reference/dilute_compounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dilute compounds — dilute_compounds","text":"object growthSimulation object dilution.factor Numeric within range [0,1], compound concentrations diluted. `1` completely dilutes concentrations 0 mM, `0` change anything. compounds Character compound IDs diluted. `NULL`, compounds diluted. incl.constant Logical specifying whether also constant compounds diluted. Default: FALSE","code":""},{"path":"https://waschina.github.io/Eutropia/reference/growthEnvironment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of the S4 class ","title":"Structure of the S4 class ","text":"Structure S4 class \"growthEnvironment\"","code":""},{"path":"https://waschina.github.io/Eutropia/reference/growthEnvironment-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of the S4 class ","text":"field.pts Object class 'XYZ'. Coordinates rhombic dodecahedron centroids. compounds Character vector compound IDs compound.names Character vector compound names compound.D Numeric vector diffusion coefficient values compound. Unit: \\(\\mu\\)m^2/s concentrations (n x m) numeric matrix n columns representing compounds m grid field (field.pts). Units matrix entries: mM conc.isConstant Logical vector indicating respective compound fixed (.e. buffered) concentration. fieldLayers Integer specifying many layers (z-dimension) rhomic dodecahedra fields environment representation. nfields Integer indicating number fields environment representation. fieldSize Size rhomic dodecahedron \\(\\mu\\)m distance opposite faces. fieldVol Volume field. Unit: \\(\\mu\\)m^3 mat.two column numeric matrix representation grid environment directed graph. First column () second column () denoting field's indices `field.pts` mat.two column matrix. First column: indices field `field.pts`; second column: Number neighboring fields exoenzymes list Exoenzyme S4 objects. exoenzymes.conc `concentrations`, exoenzymes nM.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/growthSimulation-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Structure of the S4 class ","title":"Structure of the S4 class ","text":"Structure S4 class growthSimulation framework growth environment container agent-based flux balance analysis.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/growthSimulation-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Structure of the S4 class ","text":"n_rounds integer number simulation rounds already performed growthSimulation object. deltaTime double length time step simulation hours. rMotion double. Maximum x- y distance cell can travel means random movement per simulation round. Unit: \\(\\mu\\)m per minute. models List Organism objects represent different strains simulation. history list recordings simulation status information simulation round. cellDT Data table individual cell information (e.g. size, position, velocity, type) universePolygon Matrix specifying corners polygon defines growth environment boundaries. 2-dimensional: x y. environ Object S4-class growthEnvironment, specifies environment mesh layout, compounds, concentrations. recordDir Directory name, intermediate compound concentrations recorded turned run_simulation. Files directory meant internal resource direct analysis outside package. rcdt data.table stores last reduced cost values cell's exchange reactions. information indicate growth limiting compounds.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/init_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a growth simulation. — init_simulation","title":"Initialize a growth simulation. — init_simulation","text":"Method initialize growthSimulation object","code":""},{"path":"https://waschina.github.io/Eutropia/reference/init_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a growth simulation. — init_simulation","text":"","code":"init_simulation(   universePolygon,   gridFieldSize = 1,   gridFieldLayers = 3,   deltaTime = 1/6,   rMotion = 0.1 )"},{"path":"https://waschina.github.io/Eutropia/reference/init_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a growth simulation. — init_simulation","text":"universePolygon two column matrix specifying x y coordinates polygon corners, describe growth environment boundaries. Alternatively, character indicating one polygon presets can provided (see details). gridFieldSize double. Distance neighboring environments 3D mesh field elements (rhombic dodecahedrons) \\(\\mu\\)m. gridFieldLayers integer. z-dimension (height) number layers field elements. deltaTime double specifying length time step simulation hours. rMotion double. Maximum distance cell can travel means Brownian motion \\(\\mu\\) per minute. Default: 0.1 \\(\\mu\\)m","code":""},{"path":"https://waschina.github.io/Eutropia/reference/init_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a growth simulation. — init_simulation","text":"Object class growthSimulation.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/init_simulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a growth simulation. — init_simulation","text":"Available universe polygon presets: \"Petri_<R>\" Petri dish-like object (actually 99-corner polygon),   `<R>` replaced integer, indicating radius   dish \\(\\mu\\)m. \"Rectangle_<X>_<Y>\" , *surprise*, rectangle. `<X>` `<Y>`   integers specifying width height \\(\\mu\\)m, respectively. \"Kiel_<L>\" let microbes thrive within Kiel's city limits. Use `<L>`   specify latitude dimension \\(\\mu\\)m (integer). longitude automatically   scaled accordingly.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/init_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a growth simulation. — init_simulation","text":"","code":"# Construction a square environment of dimensions 100\\eqn{\\mu}m x 120\\eqn{\\mu}m x 3\\eqn{\\mu}m sim <- init_simulation(cbind(c(-50, -50, 50, 50),                              c(-60, 60, 60, -60)),                        gridFieldSize = 1, gridFieldLayers = 3) sim <- init_simulation(\"rectangle_100_120\", gridFieldSize = 1,                        gridFieldLayers = 3)  # Construct a Petri dish-like simulation environment (radius: 75 \\eqn{\\mu}m) sim <- init_simulation(\"Petri_75\", gridFieldSize = 1,                        gridFieldLayers = 3)"},{"path":"https://waschina.github.io/Eutropia/reference/plot_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial distribution of cells — plot_cells","title":"Plot spatial distribution of cells — plot_cells","text":"Plots distribution cells growth simulation.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial distribution of cells — plot_cells","text":"","code":"plot_cells(   object,   xlim = NULL,   ylim = NULL,   iter = NULL,   scalebar.color = \"white\",   background.color = \"black\",   incl.timestamp = TRUE,   legend.position = \"bottom\",   plot.title = NULL )"},{"path":"https://waschina.github.io/Eutropia/reference/plot_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial distribution of cells — plot_cells","text":"object S4-object type growthSimulation. xlim Numeric vector length 2, specifying x-range displayed. ylim Numeric vector length 2, specifying y-range displayed. iter Positive integer number simulation step/iteration plot cell distribution. NULL, current distribution displayed. scalebar.color Color scale bar annotation. Default: \"white\". background.color Color growth environment background. incl.timestamp Boolean indicating whether time stamp included plot. Default: TRUE legend.position position legends (\"none\", \"left\", \"right\", \"bottom\", \"top\", two-element numeric vector), handled ggplot2. Default: \"bottom\" plot.title optional title written top plot.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spatial distribution of cells — plot_cells","text":"ggplot object.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_compounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot compound time curves — plot_compounds","title":"Plot compound time curves — plot_compounds","text":"Plot concentrations metabolites time","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_compounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot compound time curves — plot_compounds","text":"","code":"plot_compounds(object, compounds = NULL, tlim = NULL, ylim = NULL)"},{"path":"https://waschina.github.io/Eutropia/reference/plot_compounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot compound time curves — plot_compounds","text":"object S4-object class growthSimulation. compounds Vector compound IDs whose concentration plotted. IDs provided, top variable (SD) compounds plotted (max. 8 compounds). tlim Numeric vector length 2, specifying x-range (Time) displayed. ylim Numeric vector length 2, specifying y-range (mM) displayed.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_compounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot compound time curves — plot_compounds","text":"ggplot.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial distribution of compounds — plot_environment","title":"Plot spatial distribution of compounds — plot_environment","text":"Plots spatial distribution compound concentrations heatmap.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial distribution of compounds — plot_environment","text":"","code":"plot_environment(   object,   compounds,   compound.names = NULL,   xlim = NULL,   ylim = NULL,   iter = NULL,   scalebar.color = \"white\",   layer = 0,   gradient.limits = NULL,   gradient.option = \"viridis\",   incl.timestamp = TRUE,   legend.position = \"right\" )"},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial distribution of compounds — plot_environment","text":"object S4-object type growthSimulation. compounds Character string compound ids plot compound.names Character string compound names displayed facet header instead compound names simulation object. xlim Numeric vector length 2 specifying limits (left right) x axis; .e. horizontal dimension. ylim Numeric vector length 2 specifying limits (top bottom) y axis; .e. vertical dimension. iter Positive integer number simulation step/iteration plot distribution. Works respective metabolite concentrations prior recorded (see run_simulation). `NULL`, current distribution compound concentrations. scalebar.color Color scale bar annotation. Default: \"white\". layer Positive integer, specifying layer (z-dimension) plot. Default: 0 (base plane). gradient.limits Numeric vector length 2 specifying concentration range spanned color gradient. gradient.option Character string indicating colormap used visualizing metabolite concentrations. Please refer scale_colour_viridis_d see possible options. incl.timestamp Boolean indicating whether timestamp included plot. Default: TRUE legend.position position legends (\"none\", \"left\", \"right\", \"bottom\", \"top\", two-element numeric vector), handled ggplot2. Default: \"right\"","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spatial distribution of compounds — plot_environment","text":"ggplot","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment_exoenzymes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot spatial distribution of exoenzymes — plot_environment_exoenzymes","title":"Plot spatial distribution of exoenzymes — plot_environment_exoenzymes","text":"Plots spatial distribution exoenzyme concentrations heatmap.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment_exoenzymes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot spatial distribution of exoenzymes — plot_environment_exoenzymes","text":"","code":"plot_environment_exoenzymes(   object,   exoenzymes,   exoenzyme.names = NULL,   xlim = NULL,   ylim = NULL,   iter = NULL,   scalebar.color = \"white\",   layer = 0,   gradient.limits = NULL,   gradient.option = \"viridis\",   incl.timestamp = TRUE,   legend.position = \"right\" )"},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment_exoenzymes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot spatial distribution of exoenzymes — plot_environment_exoenzymes","text":"object S4-object type growthSimulation exoenzymes Character string exoenzyme ids plot exoenzyme.names Character string exoenzyme names displayed facet header instead exoenzyme names simulation object. xlim Numeric vector length 2 specifying limits (left right) x axis; .e. horizontal dimension. ylim Numeric vector length 2 specifying limits (top bottom) y axis; .e. vertical dimension. iter Positive integer number simulation step/iteration plot distribution. Works respective metabolite concentrations prior recorded (see run_simulation). NULL, current distribution exoenzyme concentrations. scalebar.color Color scale bar annotation. Default: \"white\". layer Positive integer, specifying layer (z-dimension) plot. Default: 0 (base plane). gradient.limits Numeric vector length 2 specifying concentration range spanned color gradient. gradient.option Character string indicating colormap used visualizing exoenzyme concentrations. Please refer scale_colour_viridis_d see possible options. incl.timestamp Boolean indicating whether timestamp included plot. Default: TRUE legend.position position legends (\"none\", \"left\", \"right\", \"bottom\", \"top\", two-element numeric vector), handled ggplot2. Default: \"right\"","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_environment_exoenzymes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot spatial distribution of exoenzymes — plot_environment_exoenzymes","text":"ggplot","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_growth.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot growth curves — plot_growth","title":"Plot growth curves — plot_growth","text":"Plot population growth time","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_growth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot growth curves — plot_growth","text":"","code":"plot_growth(object, tlim = NULL, ylim = NULL)"},{"path":"https://waschina.github.io/Eutropia/reference/plot_growth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot growth curves — plot_growth","text":"object S4-object class growthSimulation. tlim Numeric vector length 2, specifying x-range (Time) displayed. ylim Numeric vector length 2, specifying y-range (Mass) displayed.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/plot_growth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot growth curves — plot_growth","text":"ggplot","code":""},{"path":"https://waschina.github.io/Eutropia/reference/run_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Run simulation — run_simulation","title":"Run simulation — run_simulation","text":"Run agent- FBA-based simulation.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/run_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run simulation — run_simulation","text":"","code":"run_simulation(   object,   niter,   verbose = 1,   lim_cells = 1e+05,   lim_time = 300,   convergence.e = 1e-04,   record = NULL,   n.cores = NULL,   live.plot = F,   on.iteration = NULL,   ... )"},{"path":"https://waschina.github.io/Eutropia/reference/run_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run simulation — run_simulation","text":"object object class growthSimulation niter Number rounds simulate verbose Control 'chattiness' simulation logs. 0 - logs, 1 - main logs, 2 - chaffinch. lim_cells Simulation terminates total number cells exceed value. lim_time Simulation terminated first iteration finished time limit (minutes). convergence.e Numeric indicating community growth (pg) considered reached convergence record Character vector indicates, simulation variables recorded simulation iteration. See Details. n.cores Number CPUs use parallelisation. NULL (default), use number detectable cores minus 1 maximum 10 cores. live.plot Logical. TRUE, positions cells plotted iteration. Caution: May reduce performance simulation. Default: FALSE .iteration optional function performed end iteration returns object class growthSimulation. ... Additional arguments `.iteration`","code":""},{"path":"https://waschina.github.io/Eutropia/reference/run_simulation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run simulation — run_simulation","text":"Recording: cells' positions, masses, sizes, metabolite exchanges always recorded. Also recorded global metabolite concentrations. Due memory considerations, local metabolite concentrations recorded default. However, users can specify concentrations tracked simulation using `record` option. E.g. record = c(\"compound_cpd00029_e0\",\"compound_cpd00211_e0\") records concentration fo two metabolites `cpd00029_e0` `cpd00211_e0`. compound concentration can recorded record = \"compounds\" , yet, advised storage- time-consuming. Compound concentrations stored memory hard drive file within working directory. Tracked concentrations can also plotted plot_environment. Exoenzyme concentrations recorded current version. Convergence checked calculating ratio: $$c := | a_i / min(a_{-1},...,a_{-5}) - 1 |$$ \\(a_i\\) total biomass iteration \\(\\). simulation terminates \\(c\\) `convergence.e`. Thus, one can expect longer simulations reducing `convergence.e`.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/show-growthSimulation-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a short summary of a growth simulation — show,growthSimulation-method","title":"Print a short summary of a growth simulation — show,growthSimulation-method","text":"Displays numbers describe current status growth simulation.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/show-growthSimulation-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a short summary of a growth simulation — show,growthSimulation-method","text":"","code":"# S4 method for growthSimulation show(object)"},{"path":"https://waschina.github.io/Eutropia/reference/show-growthSimulation-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a short summary of a growth simulation — show,growthSimulation-method","text":"object S4-object type growthSimulation.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/summary_exchanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of uptake / production by organism type — summary_exchanges","title":"Summary of uptake / production by organism type — summary_exchanges","text":"Uptake/Production rates fmol summarized organism type","code":""},{"path":"https://waschina.github.io/Eutropia/reference/summary_exchanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of uptake / production by organism type — summary_exchanges","text":"","code":"summary_exchanges(object, iter = NULL)"},{"path":"https://waschina.github.io/Eutropia/reference/summary_exchanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of uptake / production by organism type — summary_exchanges","text":"object S4-object type growthSimulation. iter Positive integer number simulation step/iteration plot rates.","code":""},{"path":"https://waschina.github.io/Eutropia/reference/summary_exchanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of uptake / production by organism type — summary_exchanges","text":"data.table","code":""}]
